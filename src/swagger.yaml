openapi: 3.0.0
info:
  title: API - Doku
  version: 1.0.0
  description: API for ocean-combat web application
servers:
  - url: https://www.ocean-combat.com

paths:
  /api/user/all:
    post:
      summary: Attempt to create multiple users (not allowed)
      tags: [User]
      responses:
        '403':
          description: Operation not allowed
    put:
      summary: Attempt to update multiple users (not allowed)
      tags: [User]
      responses:
        '403':
          description: Operation not allowed
    delete:
      summary: Attempt to delete multiple users (not allowed)
      tags: [User]
      responses:
        '403':
          description: Operation not allowed
    get:
      summary: Sends all users (getAllUsers_UserService() ignores to send email addresses)
      tags: [User]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: No users found

  /api/user/{_id}:
    delete:
      summary: Deletes a single user
      tags: [User]
      parameters:
        - in: path
          name: _id
          schema:
            type: string
            format: mongoId
          required: true
          description: The user id
      responses:
        '204':
          description: The user was successfully deleted
        '400':
          description: Validation errors
        '404':
          description: The user was not found
    put:
      summary: Updates the properties of a user
      tags: [User]
      parameters:
        - in: path
          name: _id
          schema:
            type: string
            format: mongoId
          required: true
          description: The user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: The user was successfully updated
        '400':
          description: Validation errors
        '404':
          description: The user was not found
    get:
      summary: Retrieves a single user
      tags: [User]
      parameters:
        - in: path
          name: _id
          schema:
            type: string
            format: mongoId
          required: true
          description: The user id
      responses:
        '200':
          description: The user was successfully retrieved
        '400':
          description: Validation errors
        '404':
          description: The user was not found

  /api/user:
    post:
      summary: Creates a single user if data is valid
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: The user was successfully created
        '400':
          description: Validation errors or duplicate user

  /api/guest/all:
    post:
      summary: Attempt to create multiple guests (not allowed)
      tags: [Guest]
      responses:
        '403':
          description: Operation not allowed
    put:
      summary: Attempt to update all guests (not allowed)
      tags: [Guest]
      responses:
        '403':
          description: Operation not allowed
    delete:
      summary: Attempt to delete all guests (not allowed)
      tags: [Guest]
      responses:
        '403':
          description: Operation not allowed
    get:
      summary: Attempt to get all guests (not allowed)
      tags: [Guest]
      responses:
        '403':
          description: Operation not allowed

  /api/guest/{id}:
    delete:
      summary: Deletes a single guest
      tags: [Guest]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: mongoId
          required: true
          description: The guest id
      responses:
        '204':
          description: The guest was successfully deleted
        '400':
          description: Invalid id format
        '404':
          description: The guest was not found
    put:
      summary: Updates the properties of a guest
      tags: [Guest]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: mongoId
          required: true
          description: The guest id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestUpdate'
      responses:
        '200':
          description: The guest was successfully updated
        '400':
          description: Validation errors
        '404':
          description: The guest was not found
    get:
      summary: Retrieves a single guest
      tags: [Guest]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: mongoId
          required: true
          description: The guest id
      responses:
        '200':
          description: The guest was successfully retrieved
        '404':
          description: The guest was not found

  /api/guest:
    post:
      summary: Creates a single guest if data is valid
      tags: [Guest]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestCreate'
      responses:
        '201':
          description: The guest was successfully created
        '400':
          description: Validation errors or duplicate user

  /api/login:
    get:
      summary: Get a user based on JWT cookie
      tags: [Login]
      responses:
        '200':
          description: The user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid or missing token
    post:
      summary: Log in a user and set JWT cookie
      tags: [Login]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                  maxLength: 100
                password:
                  type: string
                  minLength: 1
                  maxLength: 100
      responses:
        '201':
          description: The user was successfully logged in
        '400':
          description: Validation errors
        '401':
          description: Unauthorized
    delete:
      summary: Log out a user by clearing JWT cookie
      tags: [Login]
      responses:
        '204':
          description: The user was successfully logged out

  /api/verify/{_id}:
    get:
      summary: Validate email address and activate user account
      tags: [Verification]
      parameters:
        - in: path
          name: _id
          schema:
            type: string
            format: mongoId
          required: true
          description: The user id
      responses:
        '200':
          description: Your account has been activated successfully!
        '400':
          description: Failed to activate your account or validation errors
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: mongoId
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 100
        username:
          type: string
          minLength: 3
          maxLength: 30
        points:
          type: integer
          minimum: 0
          maximum: 1000000
        premium:
          type: boolean
        level:
          type: integer
          minimum: 1
          maximum: 1000
        gameSound:
          type: number
          minimum: 0
          maximum: 1
        music:
          type: number
          minimum: 0
          maximum: 1
        higherLvlChallenge:
          type: boolean
      required: ['email', 'password', 'username']

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 45
        password:
          type: string
          minLength: 8
          maxLength: 100
        username:
          type: string
          minLength: 3
          maxLength: 30
      required: ['email', 'password', 'username']

    UserUpdate:
      type: object
      properties:
        _id:
          type: string
          format: mongoId
        email:
          type: string
          minLength: 5
          maxLength: 45
        password:
          type: string
          minLength: 8
          maxLength: 100
        premium:
          type: boolean
        gameSound:
          type: number
        music:
          type: number
        higherLvlChallenge:
          type: boolean

    Guest:
      type: object
      properties:
        id:
          type: string
          format: mongoId
        username:
          type: string
          minLength: 3
          maxLength: 30
        points:
          type: integer
          minimum: 0
          maximum: 1000000
        level:
          type: integer
          minimum: 1
          maximum: 1000
        gameSound:
          type: number
          minimum: 0
          maximum: 1
        music:
          type: number
          minimum: 0
          maximum: 1
        higherLvlChallenge:
          type: boolean
      required: ['username']

    GuestCreate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        points:
          type: integer
          minimum: 0
          maximum: 1000000
        level:
          type: integer
          minimum: 1
          maximum: 1000
        gameSound:
          type: number
          minimum: 0
          maximum: 1
        music:
          type: number
          minimum: 0
          maximum: 1
      required: ['username']

    GuestUpdate:
      type: object
      properties:
        id:
          type: string
          format: mongoId
        points:
          type: integer
          minimum: 0
          maximum: 1000000
        level:
          type: integer
          minimum: 1
          maximum: 1000
        gameSound:
          type: number
          minimum: 0
          maximum: 1
        music:
          type: number
          minimum: 0
          maximum: 1
        higherLvlChallenge:
          type: boolean

    OnlineMatch:
      type: object
      properties:
        id:
          type: string
          format: mongoId
        roomId:
          type: string
        privateMatch:
          type: boolean
        gameMap:
          type: string
        superWeapons:
          type: boolean
        shotTimer:
          type: integer
          minimum: 1
        gameMode:
          type: string
        hostName:
          type: string
        players:
          type: array
          items:
            type: string
        maxPlayers:
          type: integer
          minimum: 2
          maximum: 16
      required: ['roomId', 'privateMatch', 'gameMap', 'superWeapons', 'shotTimer', 'gameMode', 'hostName', 'players', 'maxPlayers']